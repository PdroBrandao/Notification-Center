import { PixOrder } from "src/pix-order/entities/pix-order.entity";

export class PixNotificationTemplates {
  pixOrder: PixOrder

  constructor(pixOrder: PixOrder) {
    this.pixOrder = pixOrder
  }

  templatePixOrderPending(): Array<string> { // Mensagem para mostrar pend√™ncias
    const customer = this.pixOrder.customer
    const event = this.pixOrder.event
    const transcation = this.pixOrder.transaction
    const currency = this.pixOrder.currency
    const pixCode = this.pixOrder.transaction.pix_copy_code

    return [
      `Ol√°, *${customer.name}*\n\n` +
      `S√≥ estamos esperando a confirma√ß√£o do seu pagamento no valor de *${currency}${transcation.amount}* referente ao(s) seu(s) ingresso(s) do(a) *${event.name}* para te enviar os ingressos, t√°?\n\n` +
      `Voc√™ tem um prazo de at√© 24hrs ‚è≥ para realizar o pagamento, caso contr√°rio, o seu pedido ser√° cancelado e um novo dever√° ser feito.\n\n` +
      `üëâ Ah, pra saber sobre a sua compra a qualquer hora, basta digitar um *Oi*\n\n`+
      `üìå Segue abaixo o c√≥digo do pix para copiar e colar:`,
      pixCode
    ];
  }
  
  templatePixOrderPaid(): string { // Mensagem para confirma√ß√£o de uma parcela
    const customer = this.pixOrder.customer
    const event = this.pixOrder.event
    const transcation = this.pixOrder.transaction
    const currency = this.pixOrder.currency
    const ticket = this.pixOrder.event.tickets

    let ticketString = ''
    for (let i = 0; i < ticket.length; i++) {
      let label = (ticket[i].ticket_name ? `üéüÔ∏è ${ticket[i].ticket_name}`: 'üéüÔ∏è Ingresso '+ (i+1))
      ticketString = ticketString + `\n\n ${label} - ${ticket[i].ticket_url}`
    }

    return `Ol√°, *${customer.name}*! üíô\n\n` +
    `Acabei de receber a confirma√ß√£o do seu pagamento referente ao(s) ingresso(s) do(a) *${event.name}*!üöÄ \n\n` +
    `Segue(m) abaixo o(s) ingresso(s):` +
    `${ticketString}\n\n` +
    `_Os links n√£o apareceram? Basta me responder qualquer coisa. ü§ì_ \n\n` +
    `üëâ Ah, pra saber sobre a sua compra a qualquer hora, basta digitar um *Oi*`
  }

  templatePixOrderPendingExpiring(): Array<string> { // Mensagem para notifica√ß√£o de n√£o pagamento
    const event = this.pixOrder.event
    const pixCode = this.pixOrder.transaction.pix_copy_code

    return [
      `‚ö†Ô∏è *Aten√ß√£o* ‚ö†Ô∏è\n\n` +
      `Passei aqui s√≥ pra te lembrar de realizar o pagamento do pix, t√°?\n\n` +
      `üèÉ Corra, pague logo e garanta sua vaga no(a) *${event.name}*. Caso contr√°rio, o seu pedido ser√° cancelado.\n\n` +
      `üìå Segue o c√≥digo do pix para copiar e colar:`,
      pixCode
    ];
  }
}